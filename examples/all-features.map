/*
 * This is a FHIR mapping language file containing all features currently
 * supported by the Mapping language parser.
 * It is used in the integration tests for the mapping language.
 */
/// version = 0.1
/// status = draft
map "http://fire.ly/tests/AllFeatures" = "Map testing all features"

uses "http://uk-koeln.de/fhir/StructureDefinition/CTS_Transport" alias Transport as source
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Coverage" as target
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as produced // How to specify that all generated instances are put into a bundle?

// need to find a way to split these up in multiple files
imports "http://example.org/StructureMap/Included"

group TransformPatient(source src: CTS_Transport, target tgt: Patient) <<types>>
{
	src.patid -> tgt.id;

    src.operations as operations then 
	{
		operations.data as data then 
		{
			data.values as values where "blockindex = '1' and groupindex = '0' and itemid = 'id_1131'" log "values" then
			{ 
                values.value (0..1) as val -> tgt.gender = translate(gender, 'http://example.org/translate-gender-koln', 'code') "rule_make_gender";
            } "rule_select_gender";

            data.values as values where "blockindex = '1' and groupindex = '0' and itemid = 'id_1128'" then
			{
                values.value : Address (0..*) as value -> tgt.address as address then
				{
					value -> address.postalCode "rule_make_postalCode";
					value -> address.postalCode share:pc "rule_make_postalCode";
				};
            } "rule_select_postalCode";

            data.values as values where "blockindex = '1' and groupindex = '0' and itemid = '1_0_id_1125'" then
			{
				values.value only_one as value -> tgt.name as name then
				{
					value default "'donald duck'" as vd -> name.given = vd, name.use = 'usual' "rule_make_name";
				};
            } "rule_select_name";

			data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_1333'" then
			{
			    // introduce a function that is not (yet) supported by the current spec, 'u'
				values.value as tarifform -> tgt.extension as tgt_pkvTarifform,
					tgt_pkvTarifform.url = u('http://uk-koeln.de/fhir/StructureDefinition/Extension/nNGM/pkvTarifform/0.1'),
					tgt_pkvTarifform.value = cc('http://uk-koeln.de/fhir/CodeSystem/nngm/pkv-tarifform', tarifform);
			};
        };
    };

	src.other as misc then countMisc(misc), logMisc(misc);
}
